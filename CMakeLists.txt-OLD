cmake_minimum_required(VERSION 2.8)

project(app_project)

add_executable(myapp main.cpp)

install(TARGETS myapp DESTINATION bin)

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lboost_system -lboost_filesystem -lboost_thread -lcppnetlib-client-connections -lcppnetlib-uri -lcppnetlib-server-parsers -lcppnetlib-client-connections -lcppnetlib-uri -lboost_thread -lssl -lcrypt ")
#set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lboost_system -lboost_filesystem -lboost_thread -lcppnetlib-client-connections -lcppnetlib-uri -lcppnetlib-server-parsers -lcppnetlib-client-connections -lcppnetlib-uri -lboost_thread -lssl -lcrypt ")

SET(ADDITIONAL_LIBS "")

find_package( Boost REQUIRED)

#set(Boost_USE_STATIC_LIBS        OFF)  # I've already tried ON
#set(Boost_USE_MULTITHREADED      ON)
#set(Boost_USE_STATIC_RUNTIME    OFF)

set(BOOST_CLIENT_LIBS
    ${Boost_PROGRAM_OPTIONS_LIBRARY}
    ${Boost_THREAD_LIBRARY}
    ${Boost_DATE_TIME_LIBRARY}
    ${Boost_REGEX_LIBRARY}
    ${Boost_SYSTEM_LIBRARY}
    ${Boost_FILESYSTEM_LIBRARY}
    ${Boost_CHRONO_LIBRARY})

include_directories(${Boost_INCLUDE_DIRS})
target_link_libraries(myapp ${Boost_LIBRARIES})

find_package(OpenSSL)

if (OpenSSL_FOUND)
  include_directories(${OPENSSL_INCLUDE_DIR})
endif (OpenSSL_FOUND)

include_directories(${OpenSSL_INCLUDE_DIRS})
target_link_libraries ( myapp ${OpenSSL_INCLUDE_DIRS} )
LIST(APPEND ADDITIONAL_LIBS ${OpenSSL_LIBRARIES})

set ( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} /data/dev/cpp/cpp-netlib-build )
find_package ( cppnetlib 0.11.0 REQUIRED )
include_directories ( ${CPPNETLIB_INCLUDE_DIRS} )
target_link_libraries ( myapp ${CPPNETLIB_LIBRARIES})
LIST(APPEND ADDITIONAL_LIBS ${CPPNETLIB_LIBRARIES})

LIST(APPEND ADDITIONAL_LIBS ${BOOST_CLIENT_LIBS} ${CMAKE_THREAD_LIBS_INIT} cppnetlib-uri cppnetlib-client-connections)

SET(CMAKE_REQUIRED_LIBRARIES ${ADDITIONAL_LIBS})

target_link_libraries( myapp ${OpenSSL_LIBRARIES} ${OPENSSL_LIBRARIES} ${BOOST_CLIENT_LIBS} ${CMAKE_THREAD_LIBS_INIT} cppnetlib-uri cppnetlib-client-connections)

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(myapp rt)
endif()

target_link_libraries(myapp boost_thread boost_system)

#set_target_properties(myapp PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CPP-NETLIB_BINARY_DIR}/example)